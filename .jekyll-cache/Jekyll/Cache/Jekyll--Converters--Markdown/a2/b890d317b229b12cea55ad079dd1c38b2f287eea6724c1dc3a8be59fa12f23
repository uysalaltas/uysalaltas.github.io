I"Ñ<p>In general, bounding box techniques such as AABB are used to provide collision detection in 3D environments. Although the implementation and calculation time of these algorithms are fast, their sensitivity is not sufficient in applications where each triangle is important. If you want to cover details about you should visit <a href="https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_collision_detection">this article</a>. This article will show a simple implementation on OpenGL based on the intersection between triangle and point.</p>

<h2 id="triangle-point-intersection">Triangle Point Intersection</h2>
<p>Triangles are basic shapes of 3D meshes and they are represented by three coplanar planes. For checking intersection we need to know position of 3 edges of triangles. We need some geometrical approach for checking intersection between triangle and point. If we create pyramid from point and triangle, we can check is pyramid faces are flat. Whether the surfaces between the pyramid and the point are parallel to each other tells us whether the point is inside the triangle. If all three surfaces of the pyramid are parallel to each other, the point is inside the triangle, otherwise the point is outside the triangle.</p>

<p>Lets say we have triagle named ABC and point P. When we create pyramid we will have PAB, PBC and PCA faces. For checking this faces direction, we need cross and dot products. Cross product gives us the normal of a triangle, and dot product gives us normals pointing direction. If those directions pointing same direction, point P is inside ABC triangle.</p>

<p><img class="img-fluid" src="/img/posts/OpenGL_Collision_Detection/Frame 1.png" alt="Triangle to Pyramid" /></p>

<h2 id="opengl-example">OpenGL Example</h2>

<p>In order to better understand the intersection of triangle and point, the algorithm is shown with a cube and a point on OpenGL. You can download the codes as Visual Studio Solution from the repo in the link. (BURAYA LINK GELECEK)</p>

<p>(BURAYA GIF GELECEK)</p>

<p>In order to separate the algorithm from OpenGL codes, the renderer pipeline is abstracted and called over different classes. Window creation with GLFW is done with the GLWindow class. Camera class, on the other hand, adjusts the cameraâ€™s point of view and position towards the object. In the Renderer class, objects are drawn into the created window by passing them through the renderer pipeline in line with the vertices and indices given.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GLWindow</span> <span class="n">gl_window</span><span class="p">;</span>

<span class="n">Camera</span> <span class="nf">camera</span><span class="p">(</span>
    <span class="n">glm</span><span class="o">::</span><span class="n">vec3</span><span class="p">(</span><span class="mf">100.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">200.0</span><span class="n">f</span><span class="p">),</span>
    <span class="n">glm</span><span class="o">::</span><span class="n">vec3</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">,</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">),</span>
    <span class="n">upVector</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">gl_window</span><span class="p">.</span><span class="n">WIDTH</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">gl_window</span><span class="p">.</span><span class="n">HEIGHT</span>
<span class="p">);</span>

<span class="n">Renderer</span> <span class="nf">cube</span><span class="p">(</span><span class="n">verticesCube</span><span class="p">,</span> <span class="n">indicesCube</span><span class="p">);</span>
<span class="n">Renderer</span> <span class="nf">point</span><span class="p">(</span><span class="n">pointVertices</span><span class="p">,</span> <span class="n">pointIndices</span><span class="p">);</span>
</code></pre></div></div>

<p>I hope it helps. If you have any issues or question dont hesitate to contact with me.</p>
:ET