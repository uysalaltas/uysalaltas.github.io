I"Ø<p>There is no doubt that 3D printers make our lives easier. With the use of 3D printers, slicing programs that help transform virtual objects into reality are very important. We use open source slicers such as <a href="https://github.com/Ultimaker/CuraEngine">Cura</a> and <a href="https://github.com/slic3r/Slic3r">Slic3r</a>, which are already performing well. But how does the algorithm behind this complex code base work? In this series, we will look for the answer to this question.</p>

<h2 id="triangle-plane-intersection">Triangle Plane Intersection</h2>
<p>When we want to get a toolpath from a 3D mesh structure, we need to get the answer from the triangles that make up the mesh structure. For this, it is necessary to know the points where a plane contacts the triangle.</p>

<p><img class="img-fluid" src="/img/posts/Slicer_for_3D_printers-Part1/PlaneCubeIntersect.png" alt="Plane-Triangle Intersection" /></p>

<p>As you can see the image below, Plane intersect with triangles that belongs to 3D Cube. The sum of intersection points gives huge clue about path that nozzle of 3D printers must follow. We can generate this algorithm with C++.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kt">void</span> <span class="nf">TrianglePlaneIntersection</span><span class="p">(</span><span class="n">Triangle</span> <span class="n">tri</span><span class="p">,</span> <span class="n">Plane</span> <span class="n">p</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">TriangleIntersect</span><span class="o">&gt;&amp;</span> <span class="n">outSegTips</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">TriangleIntersect</span> <span class="n">triInt</span><span class="p">;</span>
		<span class="n">Point</span> <span class="n">IntersectionPoint</span><span class="p">;</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">GetSegmentPlaneIntersection</span><span class="p">(</span><span class="n">tri</span><span class="p">.</span><span class="n">a</span><span class="p">,</span> <span class="n">tri</span><span class="p">.</span><span class="n">b</span><span class="p">,</span> <span class="n">IntersectionPoint</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span>
			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isnan</span><span class="p">(</span><span class="n">IntersectionPoint</span><span class="p">.</span><span class="n">x</span><span class="p">))</span>
			<span class="p">{</span>
				<span class="n">triInt</span><span class="p">.</span><span class="n">intersectionPointCount</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
				<span class="n">triInt</span><span class="p">.</span><span class="n">points</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">IntersectionPoint</span><span class="p">);</span>
				<span class="c1">//outSegTips.push_back(IntersectionPoint);</span>
				<span class="c1">//std::cout &lt;&lt; " A: " &lt;&lt; glm::to_string(IntersectionPoint) &lt;&lt; std::endl;</span>
			<span class="p">}</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">GetSegmentPlaneIntersection</span><span class="p">(</span><span class="n">tri</span><span class="p">.</span><span class="n">b</span><span class="p">,</span> <span class="n">tri</span><span class="p">.</span><span class="n">c</span><span class="p">,</span> <span class="n">IntersectionPoint</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span>
			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isnan</span><span class="p">(</span><span class="n">IntersectionPoint</span><span class="p">.</span><span class="n">x</span><span class="p">))</span>
			<span class="p">{</span>
				<span class="n">triInt</span><span class="p">.</span><span class="n">intersectionPointCount</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
				<span class="n">triInt</span><span class="p">.</span><span class="n">points</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">IntersectionPoint</span><span class="p">);</span>
				<span class="c1">//outSegTips.push_back(IntersectionPoint);</span>
				<span class="c1">//std::cout &lt;&lt; " B: " &lt;&lt; glm::to_string(IntersectionPoint) &lt;&lt; std::endl;</span>
			<span class="p">}</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">GetSegmentPlaneIntersection</span><span class="p">(</span><span class="n">tri</span><span class="p">.</span><span class="n">c</span><span class="p">,</span> <span class="n">tri</span><span class="p">.</span><span class="n">a</span><span class="p">,</span> <span class="n">IntersectionPoint</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span>
			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">isnan</span><span class="p">(</span><span class="n">IntersectionPoint</span><span class="p">.</span><span class="n">x</span><span class="p">))</span>
			<span class="p">{</span>
				<span class="n">triInt</span><span class="p">.</span><span class="n">intersectionPointCount</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
				<span class="n">triInt</span><span class="p">.</span><span class="n">points</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">IntersectionPoint</span><span class="p">);</span>
				<span class="c1">//outSegTips.push_back(IntersectionPoint);</span>
				<span class="c1">//std::cout &lt;&lt; " C: " &lt;&lt; glm::to_string(IntersectionPoint) &lt;&lt; std::endl;</span>
			<span class="p">}</span>

		<span class="k">if</span><span class="p">(</span><span class="n">triInt</span><span class="p">.</span><span class="n">intersectionPointCount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">outSegTips</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">triInt</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>
</code></pre></div></div>

<p>For detailed explanation and little more theory check Gabor Szauerâ€™s <a href="https://www.amazon.com/Game-Physics-Cookbook-Gabor-Szauer-ebook/dp/B01MDLX5PH">Game Physics Cookbook</a> and his <a href="https://github.com/gszauer/GamePhysicsCookbook">github repo</a>.</p>

<p>I hope it helps. If you have any issues or question dont hesitate to contact with me.</p>
:ET